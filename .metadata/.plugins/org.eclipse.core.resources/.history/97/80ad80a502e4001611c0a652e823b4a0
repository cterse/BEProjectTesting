package test;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.StringReader;
import java.util.List;

import edu.stanford.nlp.ling.CoreLabel;
import edu.stanford.nlp.ling.SentenceUtils;
import edu.stanford.nlp.parser.lexparser.LexicalizedParser;
import edu.stanford.nlp.process.CoreLabelTokenFactory;
import edu.stanford.nlp.process.PTBTokenizer;
import edu.stanford.nlp.process.Tokenizer;
import edu.stanford.nlp.process.TokenizerFactory;
import edu.stanford.nlp.trees.GrammaticalStructure;
import edu.stanford.nlp.trees.GrammaticalStructureFactory;
import edu.stanford.nlp.trees.Tree;
import edu.stanford.nlp.trees.TreePrint;
import edu.stanford.nlp.trees.TreebankLanguagePack;
import edu.stanford.nlp.trees.TypedDependency;

public class TestParser {
	public static void main(String[] args) {
		String parserModel = "edu/stanford/nlp/models/lexparser/englishPCFG.ser.gz";
		
		//If parser model is given as params,
		if(args.length > 0) {
			parserModel = args[0];
		}
		
		LexicalizedParser lp = LexicalizedParser.loadModel(parserModel);
		
		demoAPI(lp);
	}

	private static void demoAPI(LexicalizedParser lp) {
		// TODO Auto-generated method stub
		String sent2 = "A library issues books to students and teachers.";
		
		//Think of this as a factory, that creates tokenizers... :P
		TokenizerFactory<CoreLabel> tokenizerFactory = PTBTokenizer.factory(new CoreLabelTokenFactory(), "");
		
		//Get a tokenizer from the above created factory
		Tokenizer<CoreLabel> tok = tokenizerFactory.getTokenizer(new StringReader(sent2));
		
		//Use this tokenizer to tokenize the above String sent2
		List<CoreLabel> rawWords = tok.tokenize();
		
		//System.out.println(rawWords);
		System.out.println();
		
		//Parse the above tokenized sentence
		Tree parse = lp.apply(rawWords);
		
		//Print the collapsed dependencies
		File file = new File("H:\\Chinmay\\Google Drive\\BE Project\\StanfordParserOutputs.txt");
		PrintWriter pw = null;
		try {
			pw = new PrintWriter(file);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		pw.println("Output of Stanford Parser in differnet formats:");
		pw.println();
		
		pw.println("penn:");
	    TreePrint tp = new TreePrint("penn");
	    tp.printTree(parse, pw);
	    System.out.println();
	    pw.println("wordsAndTags:");
	    tp = new TreePrint("wordsAndTags");
	    tp.printTree(parse, pw);
	    System.out.println();
	    pw.println("oneline:");
	    tp = new TreePrint("oneline");
	    tp.printTree(parse, pw);
	    System.out.println();
	    pw.println("rootSymbolOnly:");
	    tp = new TreePrint("rootSymbolOnly");
	    tp.printTree(parse, pw);
	    System.out.println();
	    pw.println("words:");
	    tp = new TreePrint("words");
	    tp.printTree(parse, pw);
	    System.out.println();
	    pw.println("dependencies:");
	    tp = new TreePrint("dependencies");
	    tp.printTree(parse, pw);
	    System.out.println();
	    pw.println("typedDependencies:");
	    tp = new TreePrint("typedDependencies");
	    tp.printTree(parse, pw);
	    System.out.println();
	    tp = new TreePrint("latexTree");
	    tp.printTree(parse, pw);
	    System.out.println();
	    tp = new TreePrint("xmlTree");
	    tp.printTree(parse, pw);
	    System.out.println();
	    tp = new TreePrint("semanticGraph");
	    tp.printTree(parse, pw);
	    System.out.println();
	    tp = new TreePrint("conllStyleDependencies");
	    tp.printTree(parse, pw);
	    System.out.println();
	    tp = new TreePrint("conll2007");
	    tp.printTree(parse, pw);
		
	    //Print the parsed output
	    //System.out.println(parse);
	}
}



