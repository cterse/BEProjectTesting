Ignore the prepositional phrases, PP (at least while removing "and")

1. A library issues books and loans to students.

(ROOT
  (S
    (NP (DT A) (NN library))
    (VP (VBZ issues)
      (NP (NNS books)
        (CC and)
        (NNS loans))
      (PP (TO to)
        (NP (NNS students))))
    (. .)))

== Here, the "and" relation is between books and library. Since they are immediately beside "and", do the following:
Get to the CC. Excluding its parent's other children to the left of CC and the CC, copy everything else onto a new parse tree.

2. A library issues books to students and loans to students.

(ROOT
  (S
    (NP (DT A) (NN library))
    (VP (VBZ issues)
      (NP (NNS books))
      (PP (TO to)
        (NP (NNS students)
          (CC and)
          (NNS loans)))
      (PP (TO to)
        (NP (NNS students))))
    (. .)))
    
== We get a wrong relation in the above case. Relation should be between books and loans but is shown between students and loans.
Similarly, it does not work for "library issues loans to students and library issues books to students."

3. Issuing of books and loans is done by the library to students.

(ROOT
  (S
    (NP
      (NP (NN Issuing))
      (PP (IN of)
        (NP
          (NP (NNS books)
            (CC and)
            (NNS loans))
          (PP (TO to)
            (NP (NNS students))))))
    (VP (VBZ is)
      (VP (VBN done)
        (PP (IN by)
          (NP (DT the) (NN library)))))
    (. .)))

== Since this is in the passive voice, the exact opposite of the rule for active voice should be applied.
	That is, Get to the CC. Excluding its parent's other children to the right of CC and the CC, copy everything else onto a new parse tree.

4. Library issues books to students and issues loans to teachers.

(ROOT
  (S
    (NP (NNP Library))
    (VP
      (VP (VBZ issues)
        (NP (NNS books))
        (PP (TO to)
          (NP (NNS students))))
      (CC and)
      (VP (VBZ issues)
        (NP (NNS loans))
        (PP (TO to)
          (NP (NNS teachers)))))
    (. .)))


== Since the "and" is followed by another VBZ, we only need to copy the initial noun phrase (i.e. the phrases before the phrase containing the CC) on the new parse tree. And keep the entire part before the "and" as another sentence.

NOTE: For the sentence "A library issues books to students and loans to teachers." (same as e.g. 2), the Stanford parser gives the wrong AND relationship between "students" and "loans" when it should be "books" and "loans". However, it gives the correct relation for the above example.

5. Library issues books to students and the school has three libraries.

(ROOT
  (S
    (NP
      (NP (JJ Library) (NNS issues) (NNS books))
      (PP (TO to)
        (NP
          (NP (NNS students))
          (CC and)
          (NP (DT the) (NN school)))))
    (VP (VBZ has)
      (NP (CD three) (NNS libraries)))
    (. .)))

== Since "and" is followed by a noun phrase, directly split the above sentence.

6. Coaches and players are people.

Steps:
1. Check if there is a 'cc' reln or a 'conj'. Do this by using a list of TypedDependencies which can be produced using a GrammaticalStructure.
Use the method reln() to get the GrammaticalRelation and check if it's shortName() equals "cc" (or "conj").
If yes, then check if the DEPENDENT in the relation is an "and" by using the .dep() method on the dependency.
 
2. If "and" is found, check if the sentence in the active or the passive voice. Check for the terms 'auxpass' or 'nsubjpass' in the dependencies using the reln() method. If either of these terms are found, then the sentence is in passive voice. Else it is in active voice.

3. For ACTIVE voice,
we will use the rules mentioned above, i.e. Get to the CC. Excluding its parent's other children to the left of CC and the CC, copy everything else onto a new parse tree. Now, excluding its parent's other children to the right of CC and the CC, copy everything to a new parse tree. Then convert the two parse trees into sentences to get the original sentence split in to two sentences without an "and".
[more rules here...]
For now, do this using the tagged output. Find a way to use the tree output.


4. For PASSIVE voice,
we will use the rule mentioned above, i.e. Get to the CC. Excluding its parent's other children to the right of CC and the CC, copy everything else onto a new parse tree. Now, excluding its parent's other children to the left of CC and the CC, copy everything to a new parse tree. Convert them into sentences.
[more rules here...]
For now, do this using the tagged output. Find a way to use the tree output.